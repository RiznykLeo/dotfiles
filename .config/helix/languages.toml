[language-server]
emmet-lsp = {command = "emmet-langugage-server", args = ["--stdio"]}
cspell = {command = "cspell-lsp", args = ["--stdio"]}

[language-server.biome]
args = ["lsp-proxy", "--config-path", "./biome.jsonc"]
command = "biome"
required-root-patterns = ["biome.json", "biome.jsonc"]

[language-server.eslint]
command = "vscode-eslint-language-server"
args = ["--stdio"]
required-root-patterns = [".eslintrc", ".eslintrc.js", ".eslintrc.json", ".eslintrc.yml", ".eslintrc.yaml"]

[language-server.prettier]
command = "prettier"
args = ["--parser", "typescript"]
required-root-patterns = [".prettierrc", ".prettierrc.js", ".prettierrc.json", ".prettierrc.yml", ".prettierrc.yaml", "prettier.config.js"]

[language-server.typescript-language-server]
required-root-patterns = ["package.json", "tsconfig.json"]

[language-server.typescript-language-server.config]
hostInfo = "helix"

# JavaScript with Biome
[[language]]
name = "javascript"
language-id = "javascript"
scope = "source.js"
injection-regex = "^(js|javascript)$"
file-types = ["js"]
shebangs = ["node"]
roots = ["biome.json", "biome.jsonc"]
auto-format = true
language-servers = [
  { name = "typescript-language-server", except-features = ["format"] },
  { name = "biome", only-features = ["format", "diagnostics"] },
  "cspell"
]
formatter = { command = "biome", args = ["format", "--stdin-file-path", "a.js"] }

# JavaScript with ESLint/Prettier
[[language]]
name = "javascript"
language-id = "javascript"
scope = "source.js"
injection-regex = "^(js|javascript)$"
file-types = ["js"]
shebangs = ["node"]
roots = [".eslintrc", ".eslintrc.js", ".eslintrc.json", ".eslintrc.yml", ".eslintrc.yaml", ".prettierrc", ".prettierrc.js", ".prettierrc.json", ".prettierrc.yml", ".prettierrc.yaml", "prettier.config.js"]
auto-format = true
language-servers = [
  { name = "typescript-language-server", except-features = ["format"] },
  { name = "eslint", only-features = ["diagnostics"] },
  { name = "prettier", only-features = ["format"] },
  "cspell"
]
formatter = { command = "prettier", args = ["--stdin-filepath", "file.js"] }


# JSX with Biome
[[language]]
name = "jsx"
language-id = "javascriptreact"
scope = "source.jsx"
injection-regex = "^(jsx)$"
file-types = ["jsx"]
shebangs = ["node"]
roots = ["biome.json", "biome.jsonc"]
auto-format = true
language-servers = [
  { name = "typescript-language-server", except-features = ["format"] },
  { name = "biome", only-features = ["format", "diagnostics"] },
  "cspell"
]
formatter = { command = "biome", args = ["format", "--stdin-file-path", "a.jsx"] }

# JSX with ESLint/Prettier
[[language]]
name = "jsx"
language-id = "javascriptreact"
scope = "source.jsx"
injection-regex = "^(jsx)$"
file-types = ["jsx"]
shebangs = ["node"]
roots = [".eslintrc", ".eslintrc.js", ".eslintrc.json", ".eslintrc.yml", ".eslintrc.yaml", ".prettierrc", ".prettierrc.js", ".prettierrc.json", ".prettierrc.yml", ".prettierrc.yaml", "prettier.config.js"]
auto-format = true
language-servers = [
  { name = "typescript-language-server", except-features = ["format"] },
  { name = "eslint", only-features = ["diagnostics"] },
  { name = "prettier", only-features = ["format"] },
  "cspell"
]
formatter = { command = "prettier", args = ["--stdin-filepath", "file.jsx"] }

# TypeScript with Biome
[[language]]
name = "typescript"
language-id = "typescript"
scope = "source.ts"
injection-regex = "^(ts|typescript)$"
file-types = ["ts"]
shebangs = ["node"]
roots = ["biome.json", "biome.jsonc"]
auto-format = true
language-servers = [
  { name = "typescript-language-server", except-features = ["format"] },
  { name = "biome", only-features = ["format", "diagnostics"] },
  "cspell"
]
formatter = { command = "biome", args = ["format", "--stdin-file-path", "a.ts"] }

# TypeScript with ESLint/Prettier
[[language]]
name = "typescript"
language-id = "typescript"
scope = "source.ts"
injection-regex = "^(ts|typescript)$"
file-types = ["ts"]
shebangs = ["node"]
roots = [".eslintrc", ".eslintrc.js", ".eslintrc.json", ".eslintrc.yml", ".eslintrc.yaml", ".prettierrc", ".prettierrc.js", ".prettierrc.json", ".prettierrc.yml", ".prettierrc.yaml", "prettier.config.js"]
auto-format = true
language-servers = [
  { name = "typescript-language-server", except-features = ["format"] },
  { name = "eslint", only-features = ["diagnostics"] },
  { name = "prettier", only-features = ["format"] },
  "cspell"
]
formatter = { command = "prettier", args = ["--stdin-filepath", "file.ts"] }

# TSX with Biome
[[language]]
name = "tsx"
language-id = "typescriptreact"
scope = "source.tsx"
injection-regex = "^(tsx)$"
file-types = ["tsx"]
shebangs = ["node"]
roots = ["biome.json", "biome.jsonc"]
auto-format = true
language-servers = [
  { name = "typescript-language-server", except-features = ["format"] },
  { name = "biome", only-features = ["format", "diagnostics"] },
  "cspell"
]
formatter = { command = "biome", args = ["format", "--stdin-file-path", "a.tsx"] }

# TSX with ESLint/Prettier
[[language]]
name = "tsx"
language-id = "typescriptreact"
scope = "source.tsx"
injection-regex = "^(tsx)$"
file-types = ["tsx"]
shebangs = ["node"]
roots = [".eslintrc", ".eslintrc.js", ".eslintrc.json", ".eslintrc.yml", ".eslintrc.yaml", ".prettierrc", ".prettierrc.js", ".prettierrc.json", ".prettierrc.yml", ".prettierrc.yaml", "prettier.config.js"]
auto-format = true
language-servers = [
  { name = "typescript-language-server", except-features = ["format"] },
  { name = "eslint", only-features = ["diagnostics"] },
  { name = "prettier", only-features = ["format"] },
  "cspell"
]
formatter = { command = "prettier", args = ["--stdin-filepath", "file.tsx"] }

# JSON with Biome
[[language]]
name = "json"
language-id = "json"
scope = "source.json"
file-types = ["json"]
roots = ["biome.json", "biome.jsonc"]
language-servers = [
  { name = "vscode-json-language-server", except-features = ["format"] },
  { name = "biome", only-features = ["format", "diagnostics"] },
  "cspell"
]
formatter = { command = "biome", args = ["format", "--stdin-file-path", "file.json"] }

# JSON with Prettier
[[language]]
name = "json"
language-id = "json"
scope = "source.json"
file-types = ["json"]
roots = [".prettierrc", ".prettierrc.js", ".prettierrc.json", ".prettierrc.yml", ".prettierrc.yaml", "prettier.config.js"]
language-servers = [
  { name = "vscode-json-language-server", except-features = ["format"] },
  { name = "prettier", only-features = ["format"] },
  "cspell"
]
formatter = { command = "prettier", args = ["--stdin-filepath", "file.json"] }

# Default JSON
[[language]]
name = "json"
language-id = "json"
scope = "source.json"
file-types = ["json"]
roots = ["package.json", "tsconfig.json"]
language-servers = [
  { name = "vscode-json-language-server", except-features = ["format"] },
  "cspell"
]
formatter = { command = "biome", args = ["format", "--stdin-file-path", "file.json"] }

[[language]]
name = "markdown"
language-id = "markdown"
scope = "source.md"
file-types = ["md", "markdown"]
language-servers = ["cspell"]
